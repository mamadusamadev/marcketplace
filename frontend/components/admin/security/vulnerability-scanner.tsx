"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import {
  AlertTriangle,
  Check,
  CheckCircle2,
  Clock,
  Play,
  RefreshCw,
  Shield,
  ShieldAlert,
  XCircle,
  Info,
} from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

// Mock vulnerability scan results
const vulnerabilityScanResults = {
  lastScan: "2023-05-01T08:30:00",
  status: "completed", // scanning, completed, failed
  progress: 100,
  summary: {
    critical: 1,
    high: 3,
    medium: 5,
    low: 8,
    info: 12,
  },
  vulnerabilities: [
    {
      id: 1,
      name: "Cross-Site Scripting (XSS)",
      description: "Possível vulnerabilidade XSS detectada em formulário de comentários",
      severity: "critical",
      location: "/produtos/comentarios",
      status: "open",
      detectedAt: "2023-05-01T08:15:00",
    },
    {
      id: 2,
      name: "Configuração de CORS insegura",
      description: "Configuração de CORS permite solicitações de qualquer origem",
      severity: "high",
      location: "API Gateway",
      status: "open",
      detectedAt: "2023-05-01T08:10:00",
    },
    {
      id: 3,
      name: "Versão desatualizada de biblioteca",
      description: "Biblioteca X está usando uma versão com vulnerabilidades conhecidas",
      severity: "high",
      location: "package.json",
      status: "open",
      detectedAt: "2023-05-01T08:05:00",
    },
    {
      id: 4,
      name: "Cabeçalhos de segurança ausentes",
      description: "Cabeçalhos de segurança HTTP importantes estão ausentes",
      severity: "medium",
      location: "Configuração do servidor",
      status: "open",
      detectedAt: "2023-05-01T08:00:00",
    },
    {
      id: 5,
      name: "Exposição de informações sensíveis",
      description: "Informações sensíveis expostas em resposta de API",
      severity: "high",
      location: "/api/usuarios",
      status: "open",
      detectedAt: "2023-05-01T07:55:00",
    },
  ],
  securityChecks: [
    {
      id: 1,
      name: "Proteção contra XSS",
      status: "failed",
      details: "Encontradas 2 instâncias de possível XSS",
    },
    {
      id: 2,
      name: "Proteção contra CSRF",
      status: "passed",
      details: "Tokens CSRF implementados corretamente",
    },
    {
      id: 3,
      name: "Configuração de CORS",
      status: "failed",
      details: "Configuração de CORS muito permissiva",
    },
    {
      id: 4,
      name: "Cabeçalhos de segurança HTTP",
      status: "warning",
      details: "Alguns cabeçalhos de segurança estão ausentes",
    },
    {
      id: 5,
      name: "Proteção contra SQL Injection",
      status: "passed",
      details: "Nenhuma vulnerabilidade de SQL Injection detectada",
    },
    {
      id: 6,
      name: "Configuração de cookies",
      status: "warning",
      details: "Atributo 'secure' ausente em alguns cookies",
    },
    {
      id: 7,
      name: "Validação de entrada",
      status: "passed",
      details: "Validação de entrada implementada corretamente",
    },
    {
      id: 8,
      name: "Gerenciamento de dependências",
      status: "failed",
      details: "Encontradas 3 dependências com vulnerabilidades conhecidas",
    },
  ],
}

export function VulnerabilityScanner() {
  const [scanning, setScanning] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)
  const [results, setResults] = useState(vulnerabilityScanResults)

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return new Intl.DateTimeFormat("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    }).format(date)
  }

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case "critical":
        return <Badge variant="destructive">Crítico</Badge>
      case "high":
        return <Badge variant="destructive">Alto</Badge>
      case "medium":
        return <Badge variant="warning">Médio</Badge>
      case "low":
        return <Badge variant="blue">Baixo</Badge>
      case "info":
        return <Badge variant="outline">Info</Badge>
      default:
        return <Badge variant="outline">{severity}</Badge>
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "open":
        return <Badge variant="destructive">Aberto</Badge>
      case "in_progress":
        return <Badge variant="warning">Em progresso</Badge>
      case "resolved":
        return <Badge variant="success">Resolvido</Badge>
      case "false_positive":
        return <Badge variant="outline">Falso positivo</Badge>
      default:
        return <Badge variant="outline">{status}</Badge>
    }
  }

  const getCheckStatusBadge = (status: string) => {
    switch (status) {
      case "passed":
        return <Badge variant="success">Passou</Badge>
      case "warning":
        return <Badge variant="warning">Alerta</Badge>
      case "failed":
        return <Badge variant="destructive">Falhou</Badge>
      default:
        return <Badge variant="outline">{status}</Badge>
    }
  }

  const getCheckStatusIcon = (status: string) => {
    switch (status) {
      case "passed":
        return <CheckCircle2 className="h-5 w-5 text-green-500" />
      case "warning":
        return <AlertTriangle className="h-5 w-5 text-amber-500" />
      case "failed":
        return <XCircle className="h-5 w-5 text-red-500" />
      default:
        return <Info className="h-5 w-5" />
    }
  }

  const startScan = () => {
    setScanning(true)
    setScanProgress(0)

    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval)
          setScanning(false)
          return 100
        }
        return prev + 5
      })
    }, 300)
  }

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Scanner de Vulnerabilidades</CardTitle>
              <CardDescription>Analise o sistema em busca de vulnerabilidades de segurança</CardDescription>
            </div>
            <Shield className="h-5 w-5 text-muted-foreground" />
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {scanning ? (
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <div className="font-medium">Escaneamento em andamento...</div>
                <RefreshCw className="h-4 w-4 animate-spin" />
              </div>
              <Progress value={scanProgress} className="h-2" />
              <p className="text-sm text-muted-foreground">
                Analisando componentes do sistema. Isso pode levar alguns minutos.
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-sm font-medium">Último escaneamento</div>
                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4 text-muted-foreground" />
                    <span>{formatDate(results.lastScan)}</span>
                  </div>
                </div>
                <Button onClick={startScan}>
                  <Play className="mr-2 h-4 w-4" />
                  Iniciar Escaneamento
                </Button>
              </div>

              <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-5">
                <Card className="overflow-hidden">
                  <CardHeader className="bg-destructive/10 p-2">
                    <CardTitle className="text-center text-sm">Crítico</CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 text-center">
                    <span className="text-2xl font-bold text-destructive">{results.summary.critical}</span>
                  </CardContent>
                </Card>

                <Card className="overflow-hidden">
                  <CardHeader className="bg-red-500/10 p-2">
                    <CardTitle className="text-center text-sm">Alto</CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 text-center">
                    <span className="text-2xl font-bold text-red-500">{results.summary.high}</span>
                  </CardContent>
                </Card>

                <Card className="overflow-hidden">
                  <CardHeader className="bg-amber-500/10 p-2">
                    <CardTitle className="text-center text-sm">Médio</CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 text-center">
                    <span className="text-2xl font-bold text-amber-500">{results.summary.medium}</span>
                  </CardContent>
                </Card>

                <Card className="overflow-hidden">
                  <CardHeader className="bg-blue-500/10 p-2">
                    <CardTitle className="text-center text-sm">Baixo</CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 text-center">
                    <span className="text-2xl font-bold text-blue-500">{results.summary.low}</span>
                  </CardContent>
                </Card>

                <Card className="overflow-hidden">
                  <CardHeader className="bg-muted/50 p-2">
                    <CardTitle className="text-center text-sm">Info</CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 text-center">
                    <span className="text-2xl font-bold text-muted-foreground">{results.summary.info}</span>
                  </CardContent>
                </Card>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Tabs defaultValue="vulnerabilities" className="space-y-4">
        <TabsList>
          <TabsTrigger value="vulnerabilities">Vulnerabilidades</TabsTrigger>
          <TabsTrigger value="checks">Verificações de Segurança</TabsTrigger>
        </TabsList>

        <TabsContent value="vulnerabilities" className="space-y-4">
          {results.vulnerabilities.length > 0 ? (
            <div className="space-y-4">
              {results.summary.critical > 0 && (
                <Alert variant="destructive">
                  <ShieldAlert className="h-4 w-4" />
                  <AlertTitle>Vulnerabilidades críticas detectadas</AlertTitle>
                  <AlertDescription>
                    Foram encontradas {results.summary.critical} vulnerabilidades críticas que requerem atenção
                    imediata.
                  </AlertDescription>
                </Alert>
              )}

              {results.vulnerabilities.map((vuln) => (
                <Card
                  key={vuln.id}
                  className={`border-l-4 ${
                    vuln.severity === "critical"
                      ? "border-l-destructive"
                      : vuln.severity === "high"
                        ? "border-l-red-500"
                        : vuln.severity === "medium"
                          ? "border-l-amber-500"
                          : vuln.severity === "low"
                            ? "border-l-blue-500"
                            : "border-l-muted"
                  }`}
                >
                  <CardHeader className="pb-2">
                    <div className="flex items-start justify-between">
                      <div>
                        <CardTitle className="text-base">{vuln.name}</CardTitle>
                        <CardDescription>{vuln.location}</CardDescription>
                      </div>
                      <div className="flex items-center gap-2">
                        {getSeverityBadge(vuln.severity)}
                        {getStatusBadge(vuln.status)}
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm">{vuln.description}</p>
                    <p className="mt-2 text-xs text-muted-foreground">Detectado em: {formatDate(vuln.detectedAt)}</p>
                  </CardContent>
                  <CardFooter className="flex justify-end gap-2 border-t px-6 py-2">
                    <Button variant="outline" size="sm">
                      Ignorar
                    </Button>
                    <Button variant="outline" size="sm">
                      Marcar como falso positivo
                    </Button>
                    <Button size="sm">Resolver</Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          ) : (
            <Card>
              <CardContent className="flex flex-col items-center justify-center py-6">
                <Check className="mb-2 h-8 w-8 text-green-500" />
                <p className="text-center text-lg font-medium">Nenhuma vulnerabilidade encontrada</p>
                <p className="text-center text-sm text-muted-foreground">
                  O sistema passou em todas as verificações de segurança.
                </p>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="checks" className="space-y-4">
          <div className="grid gap-4 sm:grid-cols-2">
            {results.securityChecks.map((check) => (
              <Card key={check.id} className="overflow-hidden">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-base">{check.name}</CardTitle>
                  {getCheckStatusIcon(check.status)}
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between">
                    <p className="text-sm">{check.details}</p>
                    {getCheckStatusBadge(check.status)}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}
